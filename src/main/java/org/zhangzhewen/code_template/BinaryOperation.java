package org.zhangzhewen.code_template;

/**
 * BinaryOperation
 *
 * @author zhangzhewen
 * @date 2020/5/13
 */
public class BinaryOperation {
    /*
    1. X&1 == 0 OR == 1,判断奇偶(X%2 == 1)
    2. X = X&(X-1), 清零最低位的1
    3. X = X&(-X), 得到最低位的1
    4. 特殊的二进制位：
        0xaaaaaaaa = 10101010101010101010101010101010 (偶数位为1，奇数位为0）
        0x55555555 = 1010101010101010101010101010101 (偶数位为0，奇数位为1）
        0x33333333 = 110011001100110011001100110011 (1和0每隔两位交替出现)
        0xcccccccc = 11001100110011001100110011001100 (0和1每隔两位交替出现)
        0x0f0f0f0f = 00001111000011110000111100001111 (1和0每隔四位交替出现)
        0xf0f0f0f0 = 11110000111100001111000011110000 (0和1每隔四位交替出现)
     */
}

/*

    判断奇偶(X%2 == 1)
    清零最低位的1
    得到最低位的1

 * 使用异或运算可以解题主要因为异或运算有以下几个特点：
 *
 * 异或运算： x ^ 0 = x, x ^ 1 = ~x
 * 与运算： x & 0 = 0, x & 1 = x
 * 一个数和0做XOR运算等于本身：a⊕0 = a
 * 一个数和其本身做XOR运算等于 0：a⊕a = 0
 * XOR 运算满足交换律和结合律：a⊕b⊕a = (a⊕a)⊕b = 0⊕b = b
 * 可以用来查找缺的元素，如 https://leetcode-cn.com/problems/find-the-difference/

*/

/**
 * 位运算leetcode题目：
 *
 * 只出现一次的数字 II
 * 只出现一次的数字 III
 * 数组中两个数的最大异或值
 * 重复的DNA序列
 * 最大单词长度乘积
 */














